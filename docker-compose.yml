version: "3.8"

services:
  react-app:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - db
      - api
    networks:
      - app-network

  api:
    build:
      context: ./rest_api             # Путь к Dockerfile
    ports:
      #- "8080:8080"                  # Проброс порта для API
      - "${API_PORT}:${API_PORT}"                  # Проброс порта для веб-приложения
    #env_file:
    #  - local.env
    volumes:
      - ./rest_api/config/local.yaml:/rest_api/config/local.yaml
      #- ./config:/config         # монтируем папку для просмотра внутри контейнера
      #- ./frontend:/frontend
    environment:
      - CONFIG_PATH=${CONFIG_PATH}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - API_PORT=${API_PORT}
      - AIR_SAFETY_LOGIN=${AIR_SAFETY_LOGIN}
      - AIR_SAFETY_PASS=${AIR_SAFETY_PASS}
      - TOKEN_KEY=${TOKEN_KEY}
    depends_on:
      - db                           # Сначала запускается база данных
    networks:
      - app-network

  db:
    image: postgres:alpine           # Готовый образ PostgreSQL для Alpine
    #env_file:
    #  - local.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}  # Указываем пароль для суперпользователя
      - POSTGRES_USER=${DB_USER}          # Пользователь базы данных
      - POSTGRES_DB=${DB_NAME}            # Имя базы данных
    ports:
      - "15432:5432"                  # Проброс порта для PostgreSQL
    volumes:
      - db_data:/var/lib/postgresql/data # Том для хранения данных
      #- ./init_db:/docker-entrypoint-initdb.d # все скрипты из этой папки должны выполняться
    #restart: always                  # Перезапуск при сбое
    networks:
      - app-network

volumes:
  db_data:                           # Том для базы данных

networks:
  app-network: